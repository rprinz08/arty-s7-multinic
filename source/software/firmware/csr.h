//--------------------------------------------------------------------------------
// Auto-generated by Migen (--------) & LiteX (60431083) on 2020-04-20 19:07:16
//--------------------------------------------------------------------------------
#include <generated/soc.h>
#ifndef __GENERATED_CSR_H
#define __GENERATED_CSR_H
#include <stdint.h>
#ifdef CSR_ACCESSORS_DEFINED
extern void csr_write_simple(unsigned long v, unsigned long a);
extern unsigned long csr_read_simple(unsigned long a);
#else /* ! CSR_ACCESSORS_DEFINED */
#include <hw/common.h>
#endif /* ! CSR_ACCESSORS_DEFINED */

/* ctrl */
#define CSR_CTRL_BASE 0x82000000L
#define CSR_CTRL_RESET_ADDR 0x82000000L
#define CSR_CTRL_RESET_SIZE 1
static inline uint8_t ctrl_reset_read(void) {
	return csr_read_simple(0x82000000L);
}
static inline void ctrl_reset_write(uint8_t v) {
	csr_write_simple(v, 0x82000000L);
}
#define CSR_CTRL_SCRATCH_ADDR 0x82000004L
#define CSR_CTRL_SCRATCH_SIZE 4
static inline uint32_t ctrl_scratch_read(void) {
	uint32_t r = csr_read_simple(0x82000004L);
	r <<= 8;
	r |= csr_read_simple(0x82000008L);
	r <<= 8;
	r |= csr_read_simple(0x8200000cL);
	r <<= 8;
	r |= csr_read_simple(0x82000010L);
	return r;
}
static inline void ctrl_scratch_write(uint32_t v) {
	csr_write_simple(v >> 24, 0x82000004L);
	csr_write_simple(v >> 16, 0x82000008L);
	csr_write_simple(v >> 8, 0x8200000cL);
	csr_write_simple(v, 0x82000010L);
}
#define CSR_CTRL_BUS_ERRORS_ADDR 0x82000014L
#define CSR_CTRL_BUS_ERRORS_SIZE 4
static inline uint32_t ctrl_bus_errors_read(void) {
	uint32_t r = csr_read_simple(0x82000014L);
	r <<= 8;
	r |= csr_read_simple(0x82000018L);
	r <<= 8;
	r |= csr_read_simple(0x8200001cL);
	r <<= 8;
	r |= csr_read_simple(0x82000020L);
	return r;
}

/* identifier_mem */
#define CSR_IDENTIFIER_MEM_BASE 0x82001000L

/* uart_phy */
#define CSR_UART_PHY_BASE 0x82001800L
#define CSR_UART_PHY_TUNING_WORD_ADDR 0x82001800L
#define CSR_UART_PHY_TUNING_WORD_SIZE 4
static inline uint32_t uart_phy_tuning_word_read(void) {
	uint32_t r = csr_read_simple(0x82001800L);
	r <<= 8;
	r |= csr_read_simple(0x82001804L);
	r <<= 8;
	r |= csr_read_simple(0x82001808L);
	r <<= 8;
	r |= csr_read_simple(0x8200180cL);
	return r;
}
static inline void uart_phy_tuning_word_write(uint32_t v) {
	csr_write_simple(v >> 24, 0x82001800L);
	csr_write_simple(v >> 16, 0x82001804L);
	csr_write_simple(v >> 8, 0x82001808L);
	csr_write_simple(v, 0x8200180cL);
}

/* uart */
#define CSR_UART_BASE 0x82002000L
#define CSR_UART_RXTX_ADDR 0x82002000L
#define CSR_UART_RXTX_SIZE 1
static inline uint8_t uart_rxtx_read(void) {
	return csr_read_simple(0x82002000L);
}
static inline void uart_rxtx_write(uint8_t v) {
	csr_write_simple(v, 0x82002000L);
}
#define CSR_UART_TXFULL_ADDR 0x82002004L
#define CSR_UART_TXFULL_SIZE 1
static inline uint8_t uart_txfull_read(void) {
	return csr_read_simple(0x82002004L);
}
#define CSR_UART_RXEMPTY_ADDR 0x82002008L
#define CSR_UART_RXEMPTY_SIZE 1
static inline uint8_t uart_rxempty_read(void) {
	return csr_read_simple(0x82002008L);
}
#define CSR_UART_EV_STATUS_ADDR 0x8200200cL
#define CSR_UART_EV_STATUS_SIZE 1
static inline uint8_t uart_ev_status_read(void) {
	return csr_read_simple(0x8200200cL);
}
static inline void uart_ev_status_write(uint8_t v) {
	csr_write_simple(v, 0x8200200cL);
}
#define CSR_UART_EV_PENDING_ADDR 0x82002010L
#define CSR_UART_EV_PENDING_SIZE 1
static inline uint8_t uart_ev_pending_read(void) {
	return csr_read_simple(0x82002010L);
}
static inline void uart_ev_pending_write(uint8_t v) {
	csr_write_simple(v, 0x82002010L);
}
#define CSR_UART_EV_ENABLE_ADDR 0x82002014L
#define CSR_UART_EV_ENABLE_SIZE 1
static inline uint8_t uart_ev_enable_read(void) {
	return csr_read_simple(0x82002014L);
}
static inline void uart_ev_enable_write(uint8_t v) {
	csr_write_simple(v, 0x82002014L);
}

/* timer0 */
#define CSR_TIMER0_BASE 0x82002800L
#define CSR_TIMER0_LOAD_ADDR 0x82002800L
#define CSR_TIMER0_LOAD_SIZE 4
static inline uint32_t timer0_load_read(void) {
	uint32_t r = csr_read_simple(0x82002800L);
	r <<= 8;
	r |= csr_read_simple(0x82002804L);
	r <<= 8;
	r |= csr_read_simple(0x82002808L);
	r <<= 8;
	r |= csr_read_simple(0x8200280cL);
	return r;
}
static inline void timer0_load_write(uint32_t v) {
	csr_write_simple(v >> 24, 0x82002800L);
	csr_write_simple(v >> 16, 0x82002804L);
	csr_write_simple(v >> 8, 0x82002808L);
	csr_write_simple(v, 0x8200280cL);
}
#define CSR_TIMER0_RELOAD_ADDR 0x82002810L
#define CSR_TIMER0_RELOAD_SIZE 4
static inline uint32_t timer0_reload_read(void) {
	uint32_t r = csr_read_simple(0x82002810L);
	r <<= 8;
	r |= csr_read_simple(0x82002814L);
	r <<= 8;
	r |= csr_read_simple(0x82002818L);
	r <<= 8;
	r |= csr_read_simple(0x8200281cL);
	return r;
}
static inline void timer0_reload_write(uint32_t v) {
	csr_write_simple(v >> 24, 0x82002810L);
	csr_write_simple(v >> 16, 0x82002814L);
	csr_write_simple(v >> 8, 0x82002818L);
	csr_write_simple(v, 0x8200281cL);
}
#define CSR_TIMER0_EN_ADDR 0x82002820L
#define CSR_TIMER0_EN_SIZE 1
static inline uint8_t timer0_en_read(void) {
	return csr_read_simple(0x82002820L);
}
static inline void timer0_en_write(uint8_t v) {
	csr_write_simple(v, 0x82002820L);
}
#define CSR_TIMER0_UPDATE_VALUE_ADDR 0x82002824L
#define CSR_TIMER0_UPDATE_VALUE_SIZE 1
static inline uint8_t timer0_update_value_read(void) {
	return csr_read_simple(0x82002824L);
}
static inline void timer0_update_value_write(uint8_t v) {
	csr_write_simple(v, 0x82002824L);
}
#define CSR_TIMER0_VALUE_ADDR 0x82002828L
#define CSR_TIMER0_VALUE_SIZE 4
static inline uint32_t timer0_value_read(void) {
	uint32_t r = csr_read_simple(0x82002828L);
	r <<= 8;
	r |= csr_read_simple(0x8200282cL);
	r <<= 8;
	r |= csr_read_simple(0x82002830L);
	r <<= 8;
	r |= csr_read_simple(0x82002834L);
	return r;
}
#define CSR_TIMER0_EV_STATUS_ADDR 0x82002838L
#define CSR_TIMER0_EV_STATUS_SIZE 1
static inline uint8_t timer0_ev_status_read(void) {
	return csr_read_simple(0x82002838L);
}
static inline void timer0_ev_status_write(uint8_t v) {
	csr_write_simple(v, 0x82002838L);
}
#define CSR_TIMER0_EV_PENDING_ADDR 0x8200283cL
#define CSR_TIMER0_EV_PENDING_SIZE 1
static inline uint8_t timer0_ev_pending_read(void) {
	return csr_read_simple(0x8200283cL);
}
static inline void timer0_ev_pending_write(uint8_t v) {
	csr_write_simple(v, 0x8200283cL);
}
#define CSR_TIMER0_EV_ENABLE_ADDR 0x82002840L
#define CSR_TIMER0_EV_ENABLE_SIZE 1
static inline uint8_t timer0_ev_enable_read(void) {
	return csr_read_simple(0x82002840L);
}
static inline void timer0_ev_enable_write(uint8_t v) {
	csr_write_simple(v, 0x82002840L);
}

/* ddrphy */
#define CSR_DDRPHY_BASE 0x82003000L
#define CSR_DDRPHY_HALF_SYS8X_TAPS_ADDR 0x82003000L
#define CSR_DDRPHY_HALF_SYS8X_TAPS_SIZE 1
static inline uint8_t ddrphy_half_sys8x_taps_read(void) {
	return csr_read_simple(0x82003000L);
}
static inline void ddrphy_half_sys8x_taps_write(uint8_t v) {
	csr_write_simple(v, 0x82003000L);
}
#define CSR_DDRPHY_CDLY_RST_ADDR 0x82003004L
#define CSR_DDRPHY_CDLY_RST_SIZE 1
static inline uint8_t ddrphy_cdly_rst_read(void) {
	return csr_read_simple(0x82003004L);
}
static inline void ddrphy_cdly_rst_write(uint8_t v) {
	csr_write_simple(v, 0x82003004L);
}
#define CSR_DDRPHY_CDLY_INC_ADDR 0x82003008L
#define CSR_DDRPHY_CDLY_INC_SIZE 1
static inline uint8_t ddrphy_cdly_inc_read(void) {
	return csr_read_simple(0x82003008L);
}
static inline void ddrphy_cdly_inc_write(uint8_t v) {
	csr_write_simple(v, 0x82003008L);
}
#define CSR_DDRPHY_DLY_SEL_ADDR 0x8200300cL
#define CSR_DDRPHY_DLY_SEL_SIZE 1
static inline uint8_t ddrphy_dly_sel_read(void) {
	return csr_read_simple(0x8200300cL);
}
static inline void ddrphy_dly_sel_write(uint8_t v) {
	csr_write_simple(v, 0x8200300cL);
}
#define CSR_DDRPHY_RDLY_DQ_RST_ADDR 0x82003010L
#define CSR_DDRPHY_RDLY_DQ_RST_SIZE 1
static inline uint8_t ddrphy_rdly_dq_rst_read(void) {
	return csr_read_simple(0x82003010L);
}
static inline void ddrphy_rdly_dq_rst_write(uint8_t v) {
	csr_write_simple(v, 0x82003010L);
}
#define CSR_DDRPHY_RDLY_DQ_INC_ADDR 0x82003014L
#define CSR_DDRPHY_RDLY_DQ_INC_SIZE 1
static inline uint8_t ddrphy_rdly_dq_inc_read(void) {
	return csr_read_simple(0x82003014L);
}
static inline void ddrphy_rdly_dq_inc_write(uint8_t v) {
	csr_write_simple(v, 0x82003014L);
}
#define CSR_DDRPHY_RDLY_DQ_BITSLIP_RST_ADDR 0x82003018L
#define CSR_DDRPHY_RDLY_DQ_BITSLIP_RST_SIZE 1
static inline uint8_t ddrphy_rdly_dq_bitslip_rst_read(void) {
	return csr_read_simple(0x82003018L);
}
static inline void ddrphy_rdly_dq_bitslip_rst_write(uint8_t v) {
	csr_write_simple(v, 0x82003018L);
}
#define CSR_DDRPHY_RDLY_DQ_BITSLIP_ADDR 0x8200301cL
#define CSR_DDRPHY_RDLY_DQ_BITSLIP_SIZE 1
static inline uint8_t ddrphy_rdly_dq_bitslip_read(void) {
	return csr_read_simple(0x8200301cL);
}
static inline void ddrphy_rdly_dq_bitslip_write(uint8_t v) {
	csr_write_simple(v, 0x8200301cL);
}

/* sdram */
#define CSR_SDRAM_BASE 0x82003800L
#define CSR_SDRAM_DFII_CONTROL_ADDR 0x82003800L
#define CSR_SDRAM_DFII_CONTROL_SIZE 1
static inline uint8_t sdram_dfii_control_read(void) {
	return csr_read_simple(0x82003800L);
}
static inline void sdram_dfii_control_write(uint8_t v) {
	csr_write_simple(v, 0x82003800L);
}
#define CSR_SDRAM_DFII_PI0_COMMAND_ADDR 0x82003804L
#define CSR_SDRAM_DFII_PI0_COMMAND_SIZE 1
static inline uint8_t sdram_dfii_pi0_command_read(void) {
	return csr_read_simple(0x82003804L);
}
static inline void sdram_dfii_pi0_command_write(uint8_t v) {
	csr_write_simple(v, 0x82003804L);
}
#define CSR_SDRAM_DFII_PI0_COMMAND_ISSUE_ADDR 0x82003808L
#define CSR_SDRAM_DFII_PI0_COMMAND_ISSUE_SIZE 1
static inline uint8_t sdram_dfii_pi0_command_issue_read(void) {
	return csr_read_simple(0x82003808L);
}
static inline void sdram_dfii_pi0_command_issue_write(uint8_t v) {
	csr_write_simple(v, 0x82003808L);
}
#define CSR_SDRAM_DFII_PI0_ADDRESS_ADDR 0x8200380cL
#define CSR_SDRAM_DFII_PI0_ADDRESS_SIZE 2
static inline uint16_t sdram_dfii_pi0_address_read(void) {
	uint16_t r = csr_read_simple(0x8200380cL);
	r <<= 8;
	r |= csr_read_simple(0x82003810L);
	return r;
}
static inline void sdram_dfii_pi0_address_write(uint16_t v) {
	csr_write_simple(v >> 8, 0x8200380cL);
	csr_write_simple(v, 0x82003810L);
}
#define CSR_SDRAM_DFII_PI0_BADDRESS_ADDR 0x82003814L
#define CSR_SDRAM_DFII_PI0_BADDRESS_SIZE 1
static inline uint8_t sdram_dfii_pi0_baddress_read(void) {
	return csr_read_simple(0x82003814L);
}
static inline void sdram_dfii_pi0_baddress_write(uint8_t v) {
	csr_write_simple(v, 0x82003814L);
}
#define CSR_SDRAM_DFII_PI0_WRDATA_ADDR 0x82003818L
#define CSR_SDRAM_DFII_PI0_WRDATA_SIZE 4
static inline uint32_t sdram_dfii_pi0_wrdata_read(void) {
	uint32_t r = csr_read_simple(0x82003818L);
	r <<= 8;
	r |= csr_read_simple(0x8200381cL);
	r <<= 8;
	r |= csr_read_simple(0x82003820L);
	r <<= 8;
	r |= csr_read_simple(0x82003824L);
	return r;
}
static inline void sdram_dfii_pi0_wrdata_write(uint32_t v) {
	csr_write_simple(v >> 24, 0x82003818L);
	csr_write_simple(v >> 16, 0x8200381cL);
	csr_write_simple(v >> 8, 0x82003820L);
	csr_write_simple(v, 0x82003824L);
}
#define CSR_SDRAM_DFII_PI0_RDDATA_ADDR 0x82003828L
#define CSR_SDRAM_DFII_PI0_RDDATA_SIZE 4
static inline uint32_t sdram_dfii_pi0_rddata_read(void) {
	uint32_t r = csr_read_simple(0x82003828L);
	r <<= 8;
	r |= csr_read_simple(0x8200382cL);
	r <<= 8;
	r |= csr_read_simple(0x82003830L);
	r <<= 8;
	r |= csr_read_simple(0x82003834L);
	return r;
}
#define CSR_SDRAM_DFII_PI1_COMMAND_ADDR 0x82003838L
#define CSR_SDRAM_DFII_PI1_COMMAND_SIZE 1
static inline uint8_t sdram_dfii_pi1_command_read(void) {
	return csr_read_simple(0x82003838L);
}
static inline void sdram_dfii_pi1_command_write(uint8_t v) {
	csr_write_simple(v, 0x82003838L);
}
#define CSR_SDRAM_DFII_PI1_COMMAND_ISSUE_ADDR 0x8200383cL
#define CSR_SDRAM_DFII_PI1_COMMAND_ISSUE_SIZE 1
static inline uint8_t sdram_dfii_pi1_command_issue_read(void) {
	return csr_read_simple(0x8200383cL);
}
static inline void sdram_dfii_pi1_command_issue_write(uint8_t v) {
	csr_write_simple(v, 0x8200383cL);
}
#define CSR_SDRAM_DFII_PI1_ADDRESS_ADDR 0x82003840L
#define CSR_SDRAM_DFII_PI1_ADDRESS_SIZE 2
static inline uint16_t sdram_dfii_pi1_address_read(void) {
	uint16_t r = csr_read_simple(0x82003840L);
	r <<= 8;
	r |= csr_read_simple(0x82003844L);
	return r;
}
static inline void sdram_dfii_pi1_address_write(uint16_t v) {
	csr_write_simple(v >> 8, 0x82003840L);
	csr_write_simple(v, 0x82003844L);
}
#define CSR_SDRAM_DFII_PI1_BADDRESS_ADDR 0x82003848L
#define CSR_SDRAM_DFII_PI1_BADDRESS_SIZE 1
static inline uint8_t sdram_dfii_pi1_baddress_read(void) {
	return csr_read_simple(0x82003848L);
}
static inline void sdram_dfii_pi1_baddress_write(uint8_t v) {
	csr_write_simple(v, 0x82003848L);
}
#define CSR_SDRAM_DFII_PI1_WRDATA_ADDR 0x8200384cL
#define CSR_SDRAM_DFII_PI1_WRDATA_SIZE 4
static inline uint32_t sdram_dfii_pi1_wrdata_read(void) {
	uint32_t r = csr_read_simple(0x8200384cL);
	r <<= 8;
	r |= csr_read_simple(0x82003850L);
	r <<= 8;
	r |= csr_read_simple(0x82003854L);
	r <<= 8;
	r |= csr_read_simple(0x82003858L);
	return r;
}
static inline void sdram_dfii_pi1_wrdata_write(uint32_t v) {
	csr_write_simple(v >> 24, 0x8200384cL);
	csr_write_simple(v >> 16, 0x82003850L);
	csr_write_simple(v >> 8, 0x82003854L);
	csr_write_simple(v, 0x82003858L);
}
#define CSR_SDRAM_DFII_PI1_RDDATA_ADDR 0x8200385cL
#define CSR_SDRAM_DFII_PI1_RDDATA_SIZE 4
static inline uint32_t sdram_dfii_pi1_rddata_read(void) {
	uint32_t r = csr_read_simple(0x8200385cL);
	r <<= 8;
	r |= csr_read_simple(0x82003860L);
	r <<= 8;
	r |= csr_read_simple(0x82003864L);
	r <<= 8;
	r |= csr_read_simple(0x82003868L);
	return r;
}
#define CSR_SDRAM_DFII_PI2_COMMAND_ADDR 0x8200386cL
#define CSR_SDRAM_DFII_PI2_COMMAND_SIZE 1
static inline uint8_t sdram_dfii_pi2_command_read(void) {
	return csr_read_simple(0x8200386cL);
}
static inline void sdram_dfii_pi2_command_write(uint8_t v) {
	csr_write_simple(v, 0x8200386cL);
}
#define CSR_SDRAM_DFII_PI2_COMMAND_ISSUE_ADDR 0x82003870L
#define CSR_SDRAM_DFII_PI2_COMMAND_ISSUE_SIZE 1
static inline uint8_t sdram_dfii_pi2_command_issue_read(void) {
	return csr_read_simple(0x82003870L);
}
static inline void sdram_dfii_pi2_command_issue_write(uint8_t v) {
	csr_write_simple(v, 0x82003870L);
}
#define CSR_SDRAM_DFII_PI2_ADDRESS_ADDR 0x82003874L
#define CSR_SDRAM_DFII_PI2_ADDRESS_SIZE 2
static inline uint16_t sdram_dfii_pi2_address_read(void) {
	uint16_t r = csr_read_simple(0x82003874L);
	r <<= 8;
	r |= csr_read_simple(0x82003878L);
	return r;
}
static inline void sdram_dfii_pi2_address_write(uint16_t v) {
	csr_write_simple(v >> 8, 0x82003874L);
	csr_write_simple(v, 0x82003878L);
}
#define CSR_SDRAM_DFII_PI2_BADDRESS_ADDR 0x8200387cL
#define CSR_SDRAM_DFII_PI2_BADDRESS_SIZE 1
static inline uint8_t sdram_dfii_pi2_baddress_read(void) {
	return csr_read_simple(0x8200387cL);
}
static inline void sdram_dfii_pi2_baddress_write(uint8_t v) {
	csr_write_simple(v, 0x8200387cL);
}
#define CSR_SDRAM_DFII_PI2_WRDATA_ADDR 0x82003880L
#define CSR_SDRAM_DFII_PI2_WRDATA_SIZE 4
static inline uint32_t sdram_dfii_pi2_wrdata_read(void) {
	uint32_t r = csr_read_simple(0x82003880L);
	r <<= 8;
	r |= csr_read_simple(0x82003884L);
	r <<= 8;
	r |= csr_read_simple(0x82003888L);
	r <<= 8;
	r |= csr_read_simple(0x8200388cL);
	return r;
}
static inline void sdram_dfii_pi2_wrdata_write(uint32_t v) {
	csr_write_simple(v >> 24, 0x82003880L);
	csr_write_simple(v >> 16, 0x82003884L);
	csr_write_simple(v >> 8, 0x82003888L);
	csr_write_simple(v, 0x8200388cL);
}
#define CSR_SDRAM_DFII_PI2_RDDATA_ADDR 0x82003890L
#define CSR_SDRAM_DFII_PI2_RDDATA_SIZE 4
static inline uint32_t sdram_dfii_pi2_rddata_read(void) {
	uint32_t r = csr_read_simple(0x82003890L);
	r <<= 8;
	r |= csr_read_simple(0x82003894L);
	r <<= 8;
	r |= csr_read_simple(0x82003898L);
	r <<= 8;
	r |= csr_read_simple(0x8200389cL);
	return r;
}
#define CSR_SDRAM_DFII_PI3_COMMAND_ADDR 0x820038a0L
#define CSR_SDRAM_DFII_PI3_COMMAND_SIZE 1
static inline uint8_t sdram_dfii_pi3_command_read(void) {
	return csr_read_simple(0x820038a0L);
}
static inline void sdram_dfii_pi3_command_write(uint8_t v) {
	csr_write_simple(v, 0x820038a0L);
}
#define CSR_SDRAM_DFII_PI3_COMMAND_ISSUE_ADDR 0x820038a4L
#define CSR_SDRAM_DFII_PI3_COMMAND_ISSUE_SIZE 1
static inline uint8_t sdram_dfii_pi3_command_issue_read(void) {
	return csr_read_simple(0x820038a4L);
}
static inline void sdram_dfii_pi3_command_issue_write(uint8_t v) {
	csr_write_simple(v, 0x820038a4L);
}
#define CSR_SDRAM_DFII_PI3_ADDRESS_ADDR 0x820038a8L
#define CSR_SDRAM_DFII_PI3_ADDRESS_SIZE 2
static inline uint16_t sdram_dfii_pi3_address_read(void) {
	uint16_t r = csr_read_simple(0x820038a8L);
	r <<= 8;
	r |= csr_read_simple(0x820038acL);
	return r;
}
static inline void sdram_dfii_pi3_address_write(uint16_t v) {
	csr_write_simple(v >> 8, 0x820038a8L);
	csr_write_simple(v, 0x820038acL);
}
#define CSR_SDRAM_DFII_PI3_BADDRESS_ADDR 0x820038b0L
#define CSR_SDRAM_DFII_PI3_BADDRESS_SIZE 1
static inline uint8_t sdram_dfii_pi3_baddress_read(void) {
	return csr_read_simple(0x820038b0L);
}
static inline void sdram_dfii_pi3_baddress_write(uint8_t v) {
	csr_write_simple(v, 0x820038b0L);
}
#define CSR_SDRAM_DFII_PI3_WRDATA_ADDR 0x820038b4L
#define CSR_SDRAM_DFII_PI3_WRDATA_SIZE 4
static inline uint32_t sdram_dfii_pi3_wrdata_read(void) {
	uint32_t r = csr_read_simple(0x820038b4L);
	r <<= 8;
	r |= csr_read_simple(0x820038b8L);
	r <<= 8;
	r |= csr_read_simple(0x820038bcL);
	r <<= 8;
	r |= csr_read_simple(0x820038c0L);
	return r;
}
static inline void sdram_dfii_pi3_wrdata_write(uint32_t v) {
	csr_write_simple(v >> 24, 0x820038b4L);
	csr_write_simple(v >> 16, 0x820038b8L);
	csr_write_simple(v >> 8, 0x820038bcL);
	csr_write_simple(v, 0x820038c0L);
}
#define CSR_SDRAM_DFII_PI3_RDDATA_ADDR 0x820038c4L
#define CSR_SDRAM_DFII_PI3_RDDATA_SIZE 4
static inline uint32_t sdram_dfii_pi3_rddata_read(void) {
	uint32_t r = csr_read_simple(0x820038c4L);
	r <<= 8;
	r |= csr_read_simple(0x820038c8L);
	r <<= 8;
	r |= csr_read_simple(0x820038ccL);
	r <<= 8;
	r |= csr_read_simple(0x820038d0L);
	return r;
}

/* spisdcard */
#define CSR_SPISDCARD_BASE 0x82004000L
#define CSR_SPISDCARD_CONTROL_ADDR 0x82004000L
#define CSR_SPISDCARD_CONTROL_SIZE 2
static inline uint16_t spisdcard_control_read(void) {
	uint16_t r = csr_read_simple(0x82004000L);
	r <<= 8;
	r |= csr_read_simple(0x82004004L);
	return r;
}
static inline void spisdcard_control_write(uint16_t v) {
	csr_write_simple(v >> 8, 0x82004000L);
	csr_write_simple(v, 0x82004004L);
}
#define CSR_SPISDCARD_CONTROL_START_OFFSET 0
#define CSR_SPISDCARD_CONTROL_START_SIZE 1
#define CSR_SPISDCARD_CONTROL_LENGTH_OFFSET 8
#define CSR_SPISDCARD_CONTROL_LENGTH_SIZE 8
#define CSR_SPISDCARD_STATUS_ADDR 0x82004008L
#define CSR_SPISDCARD_STATUS_SIZE 1
static inline uint8_t spisdcard_status_read(void) {
	return csr_read_simple(0x82004008L);
}
#define CSR_SPISDCARD_STATUS_DONE_OFFSET 0
#define CSR_SPISDCARD_STATUS_DONE_SIZE 1
#define CSR_SPISDCARD_MOSI_ADDR 0x8200400cL
#define CSR_SPISDCARD_MOSI_SIZE 1
static inline uint8_t spisdcard_mosi_read(void) {
	return csr_read_simple(0x8200400cL);
}
static inline void spisdcard_mosi_write(uint8_t v) {
	csr_write_simple(v, 0x8200400cL);
}
#define CSR_SPISDCARD_MISO_ADDR 0x82004010L
#define CSR_SPISDCARD_MISO_SIZE 1
static inline uint8_t spisdcard_miso_read(void) {
	return csr_read_simple(0x82004010L);
}
#define CSR_SPISDCARD_CS_ADDR 0x82004014L
#define CSR_SPISDCARD_CS_SIZE 1
static inline uint8_t spisdcard_cs_read(void) {
	return csr_read_simple(0x82004014L);
}
static inline void spisdcard_cs_write(uint8_t v) {
	csr_write_simple(v, 0x82004014L);
}
#define CSR_SPISDCARD_CS_SEL_OFFSET 0
#define CSR_SPISDCARD_CS_SEL_SIZE 1
#define CSR_SPISDCARD_LOOPBACK_ADDR 0x82004018L
#define CSR_SPISDCARD_LOOPBACK_SIZE 1
static inline uint8_t spisdcard_loopback_read(void) {
	return csr_read_simple(0x82004018L);
}
static inline void spisdcard_loopback_write(uint8_t v) {
	csr_write_simple(v, 0x82004018L);
}
#define CSR_SPISDCARD_CLK_DIVIDER_ADDR 0x8200401cL
#define CSR_SPISDCARD_CLK_DIVIDER_SIZE 2
static inline uint16_t spisdcard_clk_divider_read(void) {
	uint16_t r = csr_read_simple(0x8200401cL);
	r <<= 8;
	r |= csr_read_simple(0x82004020L);
	return r;
}
static inline void spisdcard_clk_divider_write(uint16_t v) {
	csr_write_simple(v >> 8, 0x8200401cL);
	csr_write_simple(v, 0x82004020L);
}

/* hello */
#define CSR_HELLO_BASE 0x82004800L
#define CSR_HELLO_INPUT_ADDR 0x82004800L
#define CSR_HELLO_INPUT_SIZE 1
static inline uint8_t hello_input_read(void) {
	return csr_read_simple(0x82004800L);
}
static inline void hello_input_write(uint8_t v) {
	csr_write_simple(v, 0x82004800L);
}
#define CSR_HELLO_OUTPUT_ADDR 0x82004804L
#define CSR_HELLO_OUTPUT_SIZE 1
static inline uint8_t hello_output_read(void) {
	return csr_read_simple(0x82004804L);
}

/* pmodd */
#define CSR_PMODD_BASE 0x82005000L
#define CSR_PMODD_IN_ADDR 0x82005000L
#define CSR_PMODD_IN_SIZE 1
static inline uint8_t pmodd_in_read(void) {
	return csr_read_simple(0x82005000L);
}
#define CSR_PMODD_OUT_ADDR 0x82005004L
#define CSR_PMODD_OUT_SIZE 1
static inline uint8_t pmodd_out_read(void) {
	return csr_read_simple(0x82005004L);
}
static inline void pmodd_out_write(uint8_t v) {
	csr_write_simple(v, 0x82005004L);
}

/* disp7 */
#define CSR_DISP7_BASE 0x82005800L
#define CSR_DISP7_DISPVAL_ADDR 0x82005800L
#define CSR_DISP7_DISPVAL_SIZE 1
static inline uint8_t disp7_dispval_read(void) {
	return csr_read_simple(0x82005800L);
}
static inline void disp7_dispval_write(uint8_t v) {
	csr_write_simple(v, 0x82005800L);
}

#endif
